"use strict";

require("core-js/modules/es.typed-array.float32-array.js");

require("core-js/modules/es.typed-array.float64-array.js");

require("core-js/modules/es.typed-array.int8-array.js");

require("core-js/modules/es.typed-array.int16-array.js");

require("core-js/modules/es.typed-array.int32-array.js");

require("core-js/modules/es.typed-array.uint8-array.js");

require("core-js/modules/es.typed-array.uint8-clamped-array.js");

require("core-js/modules/es.typed-array.uint16-array.js");

require("core-js/modules/es.typed-array.uint32-array.js");

require("core-js/modules/es.typed-array.from.js");

require("core-js/modules/es.typed-array.of.js");

require("core-js/modules/web.immediate.js");

require("core-js/modules/web.url.js");

require("core-js/modules/web.url.to-json.js");

require("core-js/modules/web.url-search-params.js");

var _config = require("./config");

var model = _interopRequireWildcard(require("./model.js"));

var _recipeView = _interopRequireDefault(require("./views/recipeView.js"));

var _searchView = _interopRequireDefault(require("./views/searchView.js"));

var _resultsView = _interopRequireDefault(require("./views/resultsView.js"));

var _paginationView = _interopRequireDefault(require("./views/paginationView.js"));

var _bookmarksView = _interopRequireDefault(require("./views/bookmarksView.js"));

var _addRecipeView = _interopRequireDefault(require("./views/addRecipeView.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

// import { search } from "core-js/fn/symbol";
const recipeContainer = document.querySelector(".recipe"); // https://forkify-api.herokuapp.com/v2
///////////////////////////////////////
// if (module.hot) {
// 	module.hot.accept();
// }

const controlRecipe = async function () {
  try {
    const id = window.location.hash.slice(1);

    _recipeView.default.renderSpinner();

    if (!id) return; // 0)Update results view to mark selected search result

    _resultsView.default.update(model.getSearchResultsPage());

    _bookmarksView.default.update(model.state.bookmarks); // 1) loading recipe


    await model.loadRecipe(id); // const { recipe } = model.state;
    // 2) redering recipe

    _recipeView.default.render(model.state.recipe);

    console.log(model.state.recipe);
  } catch (err) {
    console.log(err.message);

    _recipeView.default.renderError();
  }
};

const controlSearchResults = async function () {
  try {
    _resultsView.default.renderSpinner(); //1) get search query


    const query = _searchView.default.getQuery();

    if (!query) return; //2) load search results

    await model.loadSearchResults(query); //3)  render search results

    _resultsView.default.render(model.getSearchResultsPage()); // 4)render pagination buttons


    _paginationView.default.render(model.state.search);
  } catch (err) {
    console.log(err);
  }
};

const controlPagination = function (goToPage) {
  //1)  render new search results
  _resultsView.default.render(model.getSearchResultsPage(goToPage)); // 2)render new pagination buttons


  _paginationView.default.render(model.state.search);
};

const controlServings = function (updateTo) {
  model.updateServings(updateTo);

  _recipeView.default.update(model.state.recipe);
};

const controlAddBookmarks = function () {
  // 1) add/remove bookmarks
  if (!model.state.recipe.bookmarked) model.addBookmark(model.state.recipe);else model.deleteBookmark(model.state.recipe.id); // 2) update recipe view
  // console.log(model.state.recipe);

  _recipeView.default.update(model.state.recipe); // render bookmarks


  _bookmarksView.default.render(model.state.bookmarks);
};

const controlBookmarks = function () {
  _bookmarksView.default.render(model.state.bookmarks);
};

const controlAddRecipe = async function (newRecipe) {
  try {
    // render spinner
    _addRecipeView.default.renderSpinner(); // upload new recipe data
    // console.log(newRecipe);


    await model.uploadRecipe(newRecipe);
    console.log(model.state.recipe); // render uploaded recipe

    _recipeView.default.render(model.state.recipe); // success message


    _addRecipeView.default.renderSuccess(); // render bookmarkView


    _bookmarksView.default.render(model.state.bookmarks); // change id in URL
    // window.history.pushState(null, "", `#${model.state.recipe.id}`);
    // close form


    setTimeout(function () {
      _addRecipeView.default._toggleWindow();
    }, _config.MODAL_CLOSE_SEC * 1000);
  } catch (err) {
    console.error(err.message);

    _addRecipeView.default.renderError(err.message);
  }
};

const init = function () {
  _bookmarksView.default.addHandlerRender(controlBookmarks);

  _recipeView.default.addHandlerRender(controlRecipe);

  _recipeView.default.addHandlerUpdateServings(controlServings);

  _recipeView.default.addHandlerAddBookmark(controlAddBookmarks);

  _searchView.default.addHandlerSearch(controlSearchResults);

  _paginationView.default.addHandlerClick(controlPagination);

  _addRecipeView.default._addHandlerUpload(controlAddRecipe);
};

init();